// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/framework/formats/image_file_properties.proto

#include "mediapipe/framework/formats/image_file_properties.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace mediapipe {
constexpr ImageFileProperties::ImageFileProperties(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : image_width_(0u)
  , image_height_(0u)
  , focal_length_mm_(0)
  , focal_length_35mm_(0)
  , focal_length_pixels_(0){}
struct ImageFilePropertiesDefaultTypeInternal {
  constexpr ImageFilePropertiesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImageFilePropertiesDefaultTypeInternal() {}
  union {
    ImageFileProperties _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImageFilePropertiesDefaultTypeInternal _ImageFileProperties_default_instance_;
}  // namespace mediapipe
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mediapipe_2fframework_2fformats_2fimage_5ffile_5fproperties_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mediapipe_2fframework_2fformats_2fimage_5ffile_5fproperties_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mediapipe_2fframework_2fformats_2fimage_5ffile_5fproperties_2eproto = nullptr;

const uint32_t TableStruct_mediapipe_2fframework_2fformats_2fimage_5ffile_5fproperties_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mediapipe::ImageFileProperties, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ImageFileProperties, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mediapipe::ImageFileProperties, image_width_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ImageFileProperties, image_height_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ImageFileProperties, focal_length_mm_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ImageFileProperties, focal_length_35mm_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::ImageFileProperties, focal_length_pixels_),
  0,
  1,
  2,
  3,
  4,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::mediapipe::ImageFileProperties)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::_ImageFileProperties_default_instance_),
};

const char descriptor_table_protodef_mediapipe_2fframework_2fformats_2fimage_5ffile_5fproperties_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n7mediapipe/framework/formats/image_file"
  "_properties.proto\022\tmediapipe\"\221\001\n\023ImageFi"
  "leProperties\022\023\n\013image_width\030\001 \001(\r\022\024\n\014ima"
  "ge_height\030\002 \001(\r\022\027\n\017focal_length_mm\030\003 \001(\001"
  "\022\031\n\021focal_length_35mm\030\004 \001(\001\022\033\n\023focal_len"
  "gth_pixels\030\005 \001(\001"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mediapipe_2fframework_2fformats_2fimage_5ffile_5fproperties_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fframework_2fformats_2fimage_5ffile_5fproperties_2eproto = {
  false, false, 216, descriptor_table_protodef_mediapipe_2fframework_2fformats_2fimage_5ffile_5fproperties_2eproto, "mediapipe/framework/formats/image_file_properties.proto", 
  &descriptor_table_mediapipe_2fframework_2fformats_2fimage_5ffile_5fproperties_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_mediapipe_2fframework_2fformats_2fimage_5ffile_5fproperties_2eproto::offsets,
  file_level_metadata_mediapipe_2fframework_2fformats_2fimage_5ffile_5fproperties_2eproto, file_level_enum_descriptors_mediapipe_2fframework_2fformats_2fimage_5ffile_5fproperties_2eproto, file_level_service_descriptors_mediapipe_2fframework_2fformats_2fimage_5ffile_5fproperties_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_mediapipe_2fframework_2fformats_2fimage_5ffile_5fproperties_2eproto_getter() {
  return &descriptor_table_mediapipe_2fframework_2fformats_2fimage_5ffile_5fproperties_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_mediapipe_2fframework_2fformats_2fimage_5ffile_5fproperties_2eproto(&descriptor_table_mediapipe_2fframework_2fformats_2fimage_5ffile_5fproperties_2eproto);
namespace mediapipe {

// ===================================================================

class ImageFileProperties::_Internal {
 public:
  using HasBits = decltype(std::declval<ImageFileProperties>()._has_bits_);
  static void set_has_image_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_image_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_focal_length_mm(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_focal_length_35mm(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_focal_length_pixels(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

ImageFileProperties::ImageFileProperties(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mediapipe.ImageFileProperties)
}
ImageFileProperties::ImageFileProperties(const ImageFileProperties& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&image_width_, &from.image_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&focal_length_pixels_) -
    reinterpret_cast<char*>(&image_width_)) + sizeof(focal_length_pixels_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.ImageFileProperties)
}

inline void ImageFileProperties::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&image_width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&focal_length_pixels_) -
    reinterpret_cast<char*>(&image_width_)) + sizeof(focal_length_pixels_));
}

ImageFileProperties::~ImageFileProperties() {
  // @@protoc_insertion_point(destructor:mediapipe.ImageFileProperties)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ImageFileProperties::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ImageFileProperties::ArenaDtor(void* object) {
  ImageFileProperties* _this = reinterpret_cast< ImageFileProperties* >(object);
  (void)_this;
}
void ImageFileProperties::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageFileProperties::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ImageFileProperties::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.ImageFileProperties)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&image_width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&focal_length_pixels_) -
        reinterpret_cast<char*>(&image_width_)) + sizeof(focal_length_pixels_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageFileProperties::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 image_width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_image_width(&has_bits);
          image_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 image_height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_image_height(&has_bits);
          image_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double focal_length_mm = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_focal_length_mm(&has_bits);
          focal_length_mm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double focal_length_35mm = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_focal_length_35mm(&has_bits);
          focal_length_35mm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double focal_length_pixels = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_focal_length_pixels(&has_bits);
          focal_length_pixels_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImageFileProperties::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.ImageFileProperties)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 image_width = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_image_width(), target);
  }

  // optional uint32 image_height = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_image_height(), target);
  }

  // optional double focal_length_mm = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_focal_length_mm(), target);
  }

  // optional double focal_length_35mm = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_focal_length_35mm(), target);
  }

  // optional double focal_length_pixels = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_focal_length_pixels(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.ImageFileProperties)
  return target;
}

size_t ImageFileProperties::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.ImageFileProperties)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 image_width = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_image_width());
    }

    // optional uint32 image_height = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_image_height());
    }

    // optional double focal_length_mm = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double focal_length_35mm = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double focal_length_pixels = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImageFileProperties::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ImageFileProperties::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImageFileProperties::GetClassData() const { return &_class_data_; }

void ImageFileProperties::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ImageFileProperties *>(to)->MergeFrom(
      static_cast<const ImageFileProperties &>(from));
}


void ImageFileProperties::MergeFrom(const ImageFileProperties& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.ImageFileProperties)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      image_width_ = from.image_width_;
    }
    if (cached_has_bits & 0x00000002u) {
      image_height_ = from.image_height_;
    }
    if (cached_has_bits & 0x00000004u) {
      focal_length_mm_ = from.focal_length_mm_;
    }
    if (cached_has_bits & 0x00000008u) {
      focal_length_35mm_ = from.focal_length_35mm_;
    }
    if (cached_has_bits & 0x00000010u) {
      focal_length_pixels_ = from.focal_length_pixels_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImageFileProperties::CopyFrom(const ImageFileProperties& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.ImageFileProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageFileProperties::IsInitialized() const {
  return true;
}

void ImageFileProperties::InternalSwap(ImageFileProperties* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageFileProperties, focal_length_pixels_)
      + sizeof(ImageFileProperties::focal_length_pixels_)
      - PROTOBUF_FIELD_OFFSET(ImageFileProperties, image_width_)>(
          reinterpret_cast<char*>(&image_width_),
          reinterpret_cast<char*>(&other->image_width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageFileProperties::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2fframework_2fformats_2fimage_5ffile_5fproperties_2eproto_getter, &descriptor_table_mediapipe_2fframework_2fformats_2fimage_5ffile_5fproperties_2eproto_once,
      file_level_metadata_mediapipe_2fframework_2fformats_2fimage_5ffile_5fproperties_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mediapipe::ImageFileProperties* Arena::CreateMaybeMessage< ::mediapipe::ImageFileProperties >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::ImageFileProperties >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
